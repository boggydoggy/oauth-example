spring:
  application:
    name: 'OAuth'
  jpa:
    hibernate:
      ddl-auto: update # SQL을 통하지 않고 연결된 DB에 JPA @Entity로 테이블 생성 가능
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: [client-id]
            client-secret: [client-secret]
            scope: profile,email
            #  https://console.cloud.google.com/welcome 에서 생성한 프로젝트의 클라이언트 id와 비밀번호 입력
            #  비밀번호는 금방 암호화되니 생성 후 따로 저장 혹은 바로 입력해야함)
#          # naver와 kakao는 Spring security에 provider가 존재하지 않아서 정의가 필요
#          naver:
#            client-id: { Client ID }
#            client-secret: { Client secret }
#            client-scope: profile,email,name
#            client-name: Naver
#            authorization-grant-type: authorization_code
#            redirect-uri: http://localhost:8088/login/oauth2/code/naver
#        provider:
#          naver:
#            authorization-uri: https://nid.naver.com/oauth2.0/authorize
#            token-uri: https://nid.naver.com/oauth2.0/token
#            user-info-uri: https://openapi.naver.com/v1/nid/me
#            user-name-attribute: response
  datasource:
    url: jdbc:postgresql://localhost:5433/testdb
    username: test
    password: test
